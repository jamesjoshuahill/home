#!/usr/bin/env bash

set -euo pipefail

default_ruby_version="2.7.1"
default_go_version="1.14.2"
default_node_version="12.16.2"

main() {
  start

  update_macos
  configure_macos
  install_sf_mono_font

  install_brew
  update_brew
  update_brew_bundle
  cleanup_brew

  remove_icons_from_dock
  set_shell

  upgrade_ruby_build
  install_ruby
  update_ruby_gems

  install_go

  install_node
  install_yarn

  install_vscode_extensions

  install_git-co-author
  create_projects_directory

  finish
}

log()  {
  local message=$1
  echo -e "\033[1m--> ${message}\033[0m"
}

start() {
  log "Start setup"
}

update_macos() {
  log "Update macOS"
  softwareupdate --install --all
}

configure_macos() {
  log "Configure macOS"
  # set menu clock format
  # see http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
  defaults write com.apple.menuextra.clock "DateFormat" 'EEE d MMM  h:mm a'
  killall SystemUIServer

  # dock
  # - turn hiding on
  defaults write com.apple.dock autohide -bool true
  # - do not show recent applications
  defaults write com.apple.dock show-recents -bool FALSE
  # - restart with new configuration
  killall Dock

  # keyboard fast key repeat, requires reboot to take effect
  defaults write "$HOME/Library/Preferences/.GlobalPreferences" KeyRepeat -int 1
  defaults write "$HOME/Library/Preferences/.GlobalPreferences" InitialKeyRepeat -int 15

  # trackpad enable tap to click, requires logout and login to take effect
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  # enable automatic software update
  defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true
  defaults write com.apple.SoftwareUpdate AutomaticDownload -bool true
}

install_sf_mono_font() {
  log "Install SF Mono font"
  local source_dir="/Applications/Utilities/Terminal.app/Contents/Resources/Fonts"

  if [ -d "/System/Applications" ]
  then
    # Applications directory moved into read-only partition in macOS Catalina
    source_dir="/System/Applications/Utilities/Terminal.app/Contents/Resources/Fonts"
  fi

  cp "$source_dir"/SFMono-*.otf "$HOME/Library/Fonts/"
}

install_brew() {
  log "Install Homebrew"
  if hash brew &> /dev/null
  then
    echo "Homebrew already installed."
    return
  fi

  yes '' | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
}

update_brew() {
  log "Update Homebrew"
  brew update
}

update_brew_bundle() {
  log "Update Homebrew Bundle"
  brew bundle --verbose --file "$HOME/.config/homebrew-bundle/Brewfile"
}

cleanup_brew() {
  log "Cleanup Homebrew"
  brew cleanup
}

remove_icons_from_dock() {
  log "Remove icons from dock"
  set +o pipefail
  dockutil --list | cut -d"$(printf '\t')" -f1 | grep -v Downloads | xargs -I{} dockutil --remove '{}' --no-restart
  set -o pipefail
  killall Dock
}

set_shell() {
  log "Set shell"
  local homebrew_bash="/usr/local/bin/bash"
  if ! grep $homebrew_bash /etc/shells &> /dev/null
  then
    echo $homebrew_bash | sudo tee -a /etc/shells > /dev/null
    echo "Added Homebrew bash to system shells."
  fi

  local user_shell
  user_shell=$(dscl /Local/Default -read "/Users/$USER" UserShell | cut -d' ' -f2)
  if [ "$user_shell" = $homebrew_bash ]
  then
    return
  fi

  chsh -s /usr/local/bin/bash
}

upgrade_ruby_build() {
  log "Upgrade ruby-build"
  brew upgrade ruby-build
}

install_ruby() {
  log "Install Ruby ${default_ruby_version}"
  eval "$(rbenv init -)"
  rbenv install $default_ruby_version --skip-existing
  rbenv global $default_ruby_version
}

update_ruby_gems() {
  log "Update Ruby Gems"
  gem update --system
}

install_go() {
  log "Install Go ${default_go_version}"
  gimme $default_go_version
}

install_node() {
  log "Install Node.js ${default_node_version}"

  export NVM_DIR="$HOME/.nvm"
  # shellcheck disable=SC1091
  source "/usr/local/opt/nvm/nvm.sh"

  nvm install $default_node_version
  nvm alias default $default_node_version
  npm completion > /usr/local/etc/bash_completion.d/npm
}

install_yarn() {
  log "Install yarn"
  npm install yarn --global
}

install_vscode_extensions() {
  log "Install VS Code extensions"
  xargs -n 1 code --force --install-extension < "$HOME/.vscode/extensions.txt"
}

install_git-co-author() {
  log "Install git-co-author"
  local temp_file
  temp_file=$(mktemp)
  curl https://raw.githubusercontent.com/jamesjoshuahill/git-co-author/master/git-co-author -o "$temp_file"
  install -C "$temp_file" /usr/local/bin/git-co-author
  touch "$HOME/.config/git/commit-template"
}

create_projects_directory() {
  log "Create ~/projects"
  mkdir -p "$HOME/projects"
}

finish() {
  log "Finished setup"
  echo
}

main
